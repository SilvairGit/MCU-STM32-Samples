#ifndef MODEL_MANAGER_H
#define MODEL_MANAGER_H

#include <stdbool.h>
#include <stdint.h>

#include "ModelParameters.h"

// Models ID
#define MODEL_MANAGER_ID_LIGHT_LIGHTNESS_SERVER 0x1300
#define MODEL_MANAGER_ID_LIGHT_LC_SERVER 0x130F
#define MODEL_MANAGER_ID_LIGHT_CTL_SERVER 0x1303
#define MODEL_MANAGER_ID_SENSOR_SERVER 0x1100
#define MODEL_MANAGER_ID_GENERIC_ONOFF_CLIENT 0x1001
#define MODEL_MANAGER_ID_GENERIC_LEVEL_CLIENT 0x1003
#define MODEL_MANAGER_ID_GENERIC_POWER_ONOFF_CLIENT 0x1008
#define MODEL_MANAGER_ID_LIGHT_LIGHTNESS_CLIENT 0x1302
#define MODEL_MANAGER_ID_LIGHT_LC_CLIENT 0x1311
#define MODEL_MANAGER_ID_LIGHT_CTL_CLIENT 0x1305
#define MODEL_MANAGER_ID_HEALTH_SERVER 0x0002
#define MODEL_MANAGER_ID_HEALTH_CLIENT 0x0003
#define MODEL_MANAGER_ID_SENSOR_CLIENT 0x1102
#define MODEL_MANAGER_ID_TIME_SERVER 0x1200
#define MODEL_MANAGER_ID_LIGHT_ELT_SERVER 0xE500
#define MODEL_MANAGER_ID_GENERIC_BATTERY_SERVER 0x100C

// Light CTL Server property
#define MODEL_MANAGER_LIGHT_CTL_SERVER_PROP_MIN_TEMPERATURE 0x0320
#define MODEL_MANAGER_LIGHT_CTL_SERVER_PROP_MAX_TEMPERATURE 0x4E20

// Sensor Server property
#define MODEL_MANAGER_SENSOR_SERVER_PROP_ID_PRESENCE_DETECTED 0x004D
#define MODEL_MANAGER_SENSOR_SERVER_PROP_ID_PRESENT_AMBIENT_LIGHT_LEVEL 0x004E
#define MODEL_MANAGER_SENSOR_SERVER_PROP_ID_PRESENT_DEVICE_INPUT_POWER 0x0052
#define MODEL_MANAGER_SENSOR_SERVER_PROP_ID_PRESENT_INPUT_CURRENT 0x0057
#define MODEL_MANAGER_SENSOR_SERVER_PROP_ID_PRESENT_INPUT_VOLTAGE 0x0059
#define MODEL_MANAGER_SENSOR_SERVER_PROP_ID_TOTAL_DEVICE_ENERGY_USE 0x006A
#define MODEL_MANAGER_SENSOR_SERVER_PROP_ID_PRECISE_TOTAL_DEVICE_ENERGY_USE 0x0072

#define MODEL_MANAGER_SENSOR_SERVER_PROP_TOLERANCE_UNSPECIFIED 0xFFFF

#define MODEL_MANAGER_SENSOR_SERVER_PROP_SAMPLING_FUNCTION_UNSPECIFIED 0x00
#define MODEL_MANAGER_SENSOR_SERVER_PROP_SAMPLING_FUNCTION_INSTANTANEOUS 0x01
#define MODEL_MANAGER_SENSOR_SERVER_PROP_SAMPLING_FUNCTION_ARITHMETIC_MEAN 0x02
#define MODEL_MANAGER_SENSOR_SERVER_PROP_SAMPLING_FUNCTION_RMS 0x03
#define MODEL_MANAGER_SENSOR_SERVER_PROP_SAMPLING_FUNCTION_MAXIMUM 0x04
#define MODEL_MANAGER_SENSOR_SERVER_PROP_SAMPLING_FUNCTION_MINIMUM 0x05
#define MODEL_MANAGER_SENSOR_SERVER_PROP_SAMPLING_FUNCTION_ACCUMULATED 0x06
#define MODEL_MANAGER_SENSOR_SERVER_PROP_SAMPLING_FUNCTION_COUNT 0x07

#define MODEL_MANAGER_SENSOR_SERVER_PROP_MEASUREMENT_PERIOD_NOT_APPLICABLE 0x00

// Health Server property
#define MODEL_MANAGER_HEALTH_SERVER_PROP_COMPANY_ID_SILVAIR_ID 0x0136

// Time Server property
#define MODEL_MANAGER_TIME_SERVER_PROP_RTC_TIME_MAX_ACCURACY_PPB 10000

#define MODEL_MANAGER_TIME_SERVER_PROP_FLAG_RTC_NOT_ATTACHED 0x00
#define MODEL_MANAGER_TIME_SERVER_PROP_FLAG_RTC_WITHOUT_BATTERY_ATTACHED 0x01
#define MODEL_MANAGER_TIME_SERVER_PROP_FLAG_RTC_WITH_BATTERY_ATTACHED 0x03

struct ModelManagerRegistrationRow
{
    uint16_t       model_id;
    uint8_t const *p_model_parameter;
    uint8_t        model_parameter_len;
    uint8_t *      p_instance_index;
};

void ModelManager_RegisterModel(struct ModelManagerRegistrationRow *p_model);

uint8_t ModelManager_GetCreateInstanceIndexPayloadLen(void);

uint8_t ModelManager_CreateInstanceIndexPayload(uint8_t *p_payload, uint16_t *p_avaliable_model_list, uint8_t avaliable_model_list_len);

void ModelManager_SetInstanceIndex(uint16_t model_id, uint8_t instance_index);

void ModelManager_ResetAllInstanceIndexes(void);

bool ModelManager_IsAllModelsRegistered(void);

#endif
